// =============== Convolves transmitted radiance with the Disney diffusion profile ================

//--------------------------------------------------------------------------------------------------
// Definitions
//--------------------------------------------------------------------------------------------------

// #pragma enable_d3d11_debug_symbols
//#pragma only_renderers d3d11 playstation xboxone vulkan metal switch

#pragma kernel SubsurfaceScattering

#pragma multi_compile _ ENABLE_MSAA

// TODO: use sharp load hoisting on PS4.

// Tweak parameters.
#define SSS_BILATERAL_FILTER  1
#define SSS_USE_LDS_CACHE     0 // Use LDS as an L0 texture cache.
#define SSS_RANDOM_ROTATION   1 // Hides undersampling artifacts with high-frequency noise. TAA blurs the noise.
#define SSS_USE_TANGENT_PLANE 0 // Improves the accuracy of the approximation(0 -> 1st order). High cost. Does not work with back-facing normals.
#define SSS_CLAMP_ARTIFACT    0 // Reduces bleeding. Use with SSS_USE_TANGENT_PLANE.
#define SSS_DEBUG_LOD         0 // Displays the sampling rate: green = no filtering, blue = 1 sample, red = _SssSampleBudget samples.
#define SSS_DEBUG_NORMAL_VS   0 // Allows detection of back-facing normals.

// Do not modify these.
//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#define SHADERPASS            SHADERPASS_SUBSURFACE_SCATTERING
#define GROUP_SIZE_1D         16
#define GROUP_SIZE_2D         (GROUP_SIZE_1D * GROUP_SIZE_1D)
#define TEXTURE_CACHE_BORDER  2
#define TEXTURE_CACHE_SIZE_1D (GROUP_SIZE_1D + 2 * TEXTURE_CACHE_BORDER)
#define TEXTURE_CACHE_SIZE_2D (TEXTURE_CACHE_SIZE_1D * TEXTURE_CACHE_SIZE_1D)

// Check for support of typed UAV loads from FORMAT_R16G16B16A16_FLOAT.
// TODO: query the format support more precisely.
//#if !(defined(SHADER_API_PSSL) || defined(SHADER_API_XBOXONE)) || defined(ENABLE_MSAA)
//#define USE_INTERMEDIATE_BUFFER
//#endif

#define SSS_N_PROFILES           (8)
#define SSS_NEUTRAL_PROFILE_ID   (7)
#define SSS_LOD_THRESHOLD        (4)
#define SSS_TRSM_MODE_NONE       (0)
#define SSS_TRSM_MODE_THIN       (1)
#define SSS_BASIC_N_SAMPLES      (25)
#define SSS_BASIC_DISTANCE_SCALE (3)

//#define SSS_N_SAMPLES_NEAR_FIELD (55)
#define SSS_N_SAMPLES_FAR_FIELD  (21)

#define SSS_PIXELS_PER_SAMPLE (4)


// Do not modify these.
#define SSS_USE_TANGENT_PLANE 0 //Currenty don't have access to WS normals for this to function.
#define SSS_PASS              1
#define MILLIMETERS_PER_METER 1000
#define CENTIMETERS_PER_METER 100

#define DOWNSAMPLING_AT_MOBILE 2
//--------------------------------------------------------------------------------------------------
// Included headers
//--------------------------------------------------------------------------------------------------

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
//#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/SpaceFillingCurves.hlsl"

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"
//#include "../Shader/ShaderLibrary/TextureXR.hlsl"

//--------------------------------------------------------------------------------------------------
// Inputs & outputs
//--------------------------------------------------------------------------------------------------

uint _SssSampleBudget = 21;

TEXTURE2D_X(_IrradianceSource);                       // Includes transmitted light

// SSSBuffer texture declaration
TEXTURE2D_X(_SSSBufferTexture);
TEXTURE2D_X(_SSSSpecular);

RWStructuredBuffer<uint> _CoarseStencilBuffer: register(u1);

//
//#ifdef USE_INTERMEDIATE_BUFFER
//    //RW_TEXTURE2D_X(float4, _CameraFilteringTexture);  // Target texture
//    RWTexture2D<half4> _CameraFilteringTexture;
//#else
//    //RW_TEXTURE2D_X(float4, _CameraColorTexture);      // Target texture
//    RWTexture2D<half4> _ColorTexture;
//#endif

#define RW_TEXTURE2D_X                                                   RW_TEXTURE2D

RWTexture2D<half4> _ColorTexture;

//RWTexture2D<half4> _ColorTexture;

uint   _TexturingModeFlags;                 // 1 bit/profile; 0 = PreAndPostScatter, 1 = PostScatter
uint   _TransmissionFlags;                  // 2 bit/profile; 0 = inf. thick, 1 = thin, 2 = regular
float  _ThicknessRemaps[SSS_N_PROFILES][2]; // Remap: 0 = start, 1 = end - start
float  _WorldScales[SSS_N_PROFILES];                                         // Size of the world unit in meters
float4 _ShapeParams[SSS_N_PROFILES];        // RGB = S = 1 / D, A = filter radius
float4 _TransmissionTints[SSS_N_PROFILES];  // RGB = color, A = unused

float4 _SSScreenParams;
float4 _CoarseStencilBufferSize;


//half  _FilterKernelsNearField[SSS_N_PROFILES][SSS_N_SAMPLES_NEAR_FIELD][2]; // 0 = radius, 1 = reciprocal of the PDF
half  _FilterKernelsFarField[SSS_N_PROFILES][SSS_N_SAMPLES_FAR_FIELD][2];   // 0 = radius, 1 = reciprocal of the PDF

//--------------------------------------------------------------------------------------------------
// Implementation
//--------------------------------------------------------------------------------------------------

// Helper macro to assign view index during compute/ray pass (usually from SV_DispatchThreadID or DispatchRaysIndex())
#if defined(SHADER_STAGE_COMPUTE) || defined(SHADER_STAGE_RAY_TRACING)
#if defined(UNITY_STEREO_INSTANCING_ENABLED)
#define UNITY_XR_ASSIGN_VIEW_INDEX(viewIndex) unity_StereoEyeIndex = viewIndex;
#else
#define UNITY_XR_ASSIGN_VIEW_INDEX(viewIndex)
#endif

// Backward compatibility
#define UNITY_STEREO_ASSIGN_COMPUTE_EYE_INDEX   UNITY_XR_ASSIGN_VIEW_INDEX
#endif


#if defined(UNITY_STEREO_INSTANCING_ENABLED)
#define SLICE_ARRAY_INDEX   unity_StereoEyeIndex
#else
#define SLICE_ARRAY_INDEX  0
#endif

#if defined(UNITY_STEREO_INSTANCING_ENABLED)
#define COORD_TEXTURE2D_X(pixelCoord)                                    uint3(pixelCoord, SLICE_ARRAY_INDEX)
#else
#define COORD_TEXTURE2D_X(pixelCoord)                                    pixelCoord
#endif

// 6656 bytes used. It appears that the reserved LDS space must be a multiple of 512 bytes.
#if SSS_USE_LDS_CACHE
groupshared float2 textureCache0[TEXTURE_CACHE_SIZE_2D]; // {irradiance.rg}
groupshared float2 textureCache1[TEXTURE_CACHE_SIZE_2D]; // {irradiance.b, deviceDepth}
#endif
groupshared bool   processGroup;

#if SSS_USE_LDS_CACHE
void StoreSampleToCacheMemory(float4 value, int2 cacheCoord)
{
    int linearCoord = Mad24(TEXTURE_CACHE_SIZE_1D, cacheCoord.y, cacheCoord.x);

    textureCache0[linearCoord] = value.rg;
    textureCache1[linearCoord] = value.ba;
}

float4 LoadSampleFromCacheMemory(int2 cacheCoord)
{
    int linearCoord = Mad24(TEXTURE_CACHE_SIZE_1D, cacheCoord.y, cacheCoord.x);

    return float4(textureCache0[linearCoord],
                  textureCache1[linearCoord]);
}
#endif

float4 LoadSampleFromVideoMemory(int2 pixelCoord)
{
    float3 irradiance = LOAD_TEXTURE2D_X(_IrradianceSource, COORD_TEXTURE2D_X(pixelCoord)).rgb;
    float  depth      = LOAD_TEXTURE2D_X(_CameraDepthTexture, COORD_TEXTURE2D_X(pixelCoord)).r;

    return float4(irradiance, depth);
}

// Returns {irradiance, linearDepth}.
float4 LoadSample(int2 pixelCoord, int2 cacheOffset)
{
    float4 value;

#if SSS_USE_LDS_CACHE
    int2 cacheCoord = pixelCoord - cacheOffset;
    bool isInCache  = max((uint)cacheCoord.x, (uint)cacheCoord.y) < TEXTURE_CACHE_SIZE_1D;

    if (isInCache)
    {
        value = LoadSampleFromCacheMemory(cacheCoord);
    }
    else
#endif
    {
        // Always load both irradiance and depth.
        // Avoid dependent texture reads at the cost of extra bandwidth.
        value = LoadSampleFromVideoMemory(pixelCoord);
    }

    value.a = LinearEyeDepth(value.a, _ZBufferParams);

    return value;
}

float3 KernelValCircle(float r, float3 S)
{
    float3 expOneThird = exp(((-1.0 / 3.0) * r) * S);
    return /* 0.25 * */ S * (expOneThird + expOneThird * expOneThird * expOneThird);
}

// Computes f(r, s)/p(r, s), s.t. r = sqrt(xy^2 + z^2).
// Rescaling of the PDF is handled by 'totalWeight'.
float3 ComputeBilateralWeight(float xy2, float z, float mmPerUnit, float3 S, float rcpPdf)
{
#if (SSS_BILATERAL_FILTER == 0)
    z = 0;
#endif

    // Note: we perform all computation in millimeters.
    // So we must convert from world units (using 'mmPerUnit') to millimeters.
#if SSS_USE_TANGENT_PLANE
    // Both 'xy2' and 'z' require conversion to millimeters.
    float r = sqrt(xy2 + z * z) * mmPerUnit;
    float p = sqrt(xy2) * mmPerUnit;
#else
    // Only 'z' requires conversion to millimeters.
    float r = sqrt(xy2 + (z * mmPerUnit) * (z * mmPerUnit));
    float p = sqrt(xy2);
#endif

    float area = rcpPdf;

#if 0
    // Boost the area associated with the sample by the ratio between the sample-center distance
    // and its orthogonal projection onto the integration plane (disk).
    area *= r / p;
#endif

#if SSS_CLAMP_ARTIFACT
    return saturate(EvalBurleyDiffusionProfile(r, S) * area);
#else
    //return EvalBurleyDiffusionProfile(r, S) * area;
    return KernelValCircle(r, S) * area;
#endif
}

bool TestLightingForSSS(float3 subsurfaceLighting)
{
    return any(subsurfaceLighting);
}

// ----------------------------------------------------------------------------
// Encoding/decoding SSS buffer functions
// ----------------------------------------------------------------------------

struct SSSData
{
    float3 diffuseColor;
    float  subsurfaceMask;
    uint   diffusionProfileIndex;
};

#define SSSBufferType0 float4 // Must match GBufferType0 in deferred


// Note: The SSS buffer used here is sRGB
void EncodeIntoSSSBuffer(SSSData sssData, uint2 positionSS, out SSSBufferType0 outSSSBuffer0)
{
    outSSSBuffer0 = float4(sssData.diffuseColor, PackFloatInt8bit(sssData.subsurfaceMask, sssData.diffusionProfileIndex, 16));
}

// Note: The SSS buffer used here is sRGB
void DecodeFromSSSBuffer(float4 sssBuffer, uint2 positionSS, out SSSData sssData)
{
    sssData.diffuseColor = sssBuffer.rgb;
    sssData.subsurfaceMask = sssBuffer.r;
    sssData.diffusionProfileIndex = UnpackByte(sssBuffer.b);
    //UnpackFloatInt8bit(sssBuffer.a, 16, sssData.subsurfaceMask, sssData.diffusionProfileIndex);
}

//void DecodeFromSSSBuffer(uint2 positionSS, out SSSData sssData)
//{
//    float4 sssBuffer = LOAD_TEXTURE2D_X(_SSSBufferTexture, positionSS);
//    DecodeFromSSSBuffer(sssBuffer, positionSS, sssData);
//}

void DecodeFromSSSBuffer(uint2 positionSS, out SSSData sssData)
{
    float4 sssBuffer = LOAD_TEXTURE2D_X(_SSSBufferTexture, positionSS);
    DecodeFromSSSBuffer(sssBuffer, positionSS, sssData);
}

#define DECODE_FROM_SSSBUFFER(UNPOSITIONSS, SSS_DATA) DecodeFromSSSBuffer(UNPOSITIONSS, SSS_DATA)

// 0: [ albedo = albedo ]
// 1: [ albedo = 1 ]
// 2: [ albedo = sqrt(albedo) ]
uint GetSubsurfaceScatteringTexturingMode(int diffusionProfile)
{
    uint texturingMode = 0;

#if defined(SHADERPASS) && (SHADERPASS == SHADERPASS_SUBSURFACE_SCATTERING)
    // If the SSS pass is executed, we know we have SSS enabled.
    bool enableSss = true;
    // SSS in HDRP is a screen space effect thus, it is not available for the lighting-based ray tracing passes (RTR, RTGI and RR). Thus we need to disable
    // the feature if we are in a ray tracing pass.
#elif defined(SHADERPASS) && ((SHADERPASS == SHADERPASS_RAYTRACING_INDIRECT) || (SHADERPASS == SHADERPASS_RAYTRACING_FORWARD))
    // If the SSS pass is executed, we know we have SSS enabled.
    bool enableSss = false;
#else
    bool enableSss = _EnableSubsurfaceScattering != 0;
#endif

    if (enableSss)
    {
        bool performPostScatterTexturing = IsBitSet(_TexturingModeFlags, diffusionProfile);

        if (performPostScatterTexturing)
        {
            // Post-scatter texturing mode: the albedo is only applied during the SSS pass.
#if defined(SHADERPASS) && (SHADERPASS != SHADERPASS_SUBSURFACE_SCATTERING)
            texturingMode = 1;
#endif
        }
        else
        {
            // Pre- and post- scatter texturing mode.
            texturingMode = 2;
        }
    }

    return texturingMode;
}

// Returns the modified albedo (diffuse color) for materials with subsurface scattering.
// See GetSubsurfaceScatteringTexturingMode() above for more details.
// Ref: Advanced Techniques for Realistic Real-Time Skin Rendering.
float3 ApplySubsurfaceScatteringTexturingMode(uint texturingMode, float3 color)
{
    switch (texturingMode)
    {
    case 2:  color = sqrt(color); break;
    case 1:  color = 1;           break;
    default: color = color;       break;
    }

    return color;
}


void EvaluateSample(uint i, uint n, int2 pixelCoord, int2 cacheOffset, uint profileID,
                    float3 S, float d, float3 centerPosVS, float mmPerUnit, float pixelsPerMm,
                    float phase, float3 tangentX, float3 tangentY, float4x4 projMatrix,
                    inout float3 totalIrradiance, inout float3 totalWeight)
{
    // The sample count is loop-invariant.
    const float scale  = rcp(n);
    const float offset = rcp(n) * 0.5;

    // The phase angle is loop-invariant.
    float sinPhase, cosPhase;
    sincos(phase, sinPhase, cosPhase);

    float r, rcpPdf;
    //SampleBurleyDiffusionProfile(i * scale + offset, d, r, rcpPdf);
    //TODO
    //r = _FilterKernelsNearField[profileID][i][0];
    //rcpPdf = _FilterKernelsNearField[profileID][i][1];

    r = _FilterKernelsFarField[0][i][0];
    rcpPdf = _FilterKernelsFarField[0][i][1];

    float phi = SampleDiskGolden(i, n).y;
    float sinPhi, cosPhi;
    sincos(phi, sinPhi, cosPhi);

    float sinPsi = cosPhase * sinPhi + sinPhase * cosPhi; // sin(phase + phi)
    float cosPsi = cosPhase * cosPhi - sinPhase * sinPhi; // cos(phase + phi)

    float2 vec = r * float2(cosPsi, sinPsi);

    // Compute the screen-space position and the squared distance (in mm) in the image plane.
    int2 position; float xy2;

    #if SSS_USE_TANGENT_PLANE
        float3 relPosVS   = vec.x * tangentX + vec.y * tangentY;
        float3 positionVS = centerPosVS + relPosVS;
        float2 positionNDC = ComputeNormalizedDeviceCoordinates(positionVS, projMatrix);

        position = (int2)(positionNDC * _SSScreenParams.xy);
        xy2      = dot(relPosVS.xy, relPosVS.xy);
    #else
        // floor((pixelCoord + 0.5) + vec * pixelsPerMm)
        // position = pixelCoord + floor(0.5 + vec * pixelsPerMm);
        // position = pixelCoord + round(vec * pixelsPerMm);
        // Note that (int) truncates towards 0, while floor() truncates towards -Inf!
        position = pixelCoord + (int2)round((pixelsPerMm * r) * float2(cosPsi, sinPsi));
        xy2      = r * r;
    #endif

    float4 textureSample = LoadSample(position, cacheOffset);
    float3 irradiance    = textureSample.rgb;

    // Check the results of the stencil test.
    //if (TestLightingForSSS(irradiance))
    if (any(irradiance))
    {
        // Apply bilateral weighting.
        float  viewZ  = textureSample.a;
        float  relZ   = viewZ - centerPosVS.z;
        float3 weight = ComputeBilateralWeight(xy2, relZ, mmPerUnit, S, rcpPdf);

        // Note: if the texture sample if off-screen, (z = 0) -> (viewZ = far) -> (weight ≈ 0).
        //totalIrradiance += weight * irradiance;
        //totalWeight     += weight;
        weight = max(weight, 0.01);
        totalIrradiance += weight * irradiance;
        totalWeight     += weight;
    }
    else
    {
        // The irradiance is 0. This could happen for 2 reasons.
        // Most likely, the surface fragment does not have an SSS material.
        // Alternatively, our sample comes from a region without any geometry.
        // Our blur is energy-preserving, so 'centerWeight' should be set to 0.
        // We do not terminate the loop since we want to gather the contribution
        // of the remaining samples (e.g. in case of hair covering skin).
    }
}

void StoreResult(uint2 pixelCoord, float3 irradiance)
{
#ifdef USE_INTERMEDIATE_BUFFER
    //_CameraFilteringTexture[COORD_TEXTURE2D_X(pixelCoord)] = float4(irradiance, 1);
    _CameraFilteringTexture[pixelCoord] = float4(irradiance, 1);
#else
    //TODO
    //_CameraColorTexture[pixelCoord]    += float4(irradiance, 0);
    _ColorTexture[COORD_TEXTURE2D_X(pixelCoord)] = float4(irradiance, 0);
#endif
}

uint Get1DAddressFromPixelCoord(uint2 pixCoord, uint2 screenSize, uint eye)
{
    // We need to shift the index to look up the right eye info.
    return (pixCoord.y * screenSize.x + pixCoord.x) + eye * (screenSize.x * screenSize.y);
}

uint Get1DAddressFromPixelCoord(uint2 pixCoord, uint2 screenSize)
{
    return Get1DAddressFromPixelCoord(pixCoord, screenSize, 0);
}

[numthreads(GROUP_SIZE_2D, 1, 1)]
void SubsurfaceScattering(uint3 groupId          : SV_GroupID,
                          uint  groupThreadId    : SV_GroupThreadID,
                          uint3 dispatchThreadId : SV_DispatchThreadID)
{
    groupThreadId &= GROUP_SIZE_2D - 1; // Help the compiler
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    
    // Note: any factor of 64 is a suitable wave size for our algorithm.
    uint waveIndex = WaveReadLaneFirst(groupThreadId / 64);
    uint laneIndex = groupThreadId % 64;
    uint quadIndex = laneIndex / 4;

    // Arrange threads in the Morton order to optimally match the memory layout of GCN tiles.
    uint2 groupCoord  = DecodeMorton2D(groupThreadId);
    uint2 groupOffset = groupId.xy * GROUP_SIZE_1D;
    uint2 pixelCoord  = groupOffset + groupCoord;
    int2  cacheOffset = (int2)groupOffset - TEXTURE_CACHE_BORDER;

    
    //Disabled coarseStencil for now
    
    //if (groupThreadId == 0)
    //{
    //    //uint stencilRef = STENCILUSAGE_SUBSURFACE_SCATTERING;

    //    // Check whether the thread group needs to perform any work.
    //    uint s00Address = Get1DAddressFromPixelCoord(2 * groupId.xy + uint2(0, 0), _CoarseStencilBufferSize.xy, groupId.z);
    //    uint s10Address = Get1DAddressFromPixelCoord(2 * groupId.xy + uint2(1, 0), _CoarseStencilBufferSize.xy, groupId.z);
    //    uint s01Address = Get1DAddressFromPixelCoord(2 * groupId.xy + uint2(0, 1), _CoarseStencilBufferSize.xy, groupId.z);
    //    uint s11Address = Get1DAddressFromPixelCoord(2 * groupId.xy + uint2(1, 1), _CoarseStencilBufferSize.xy, groupId.z);

    //    /*uint s00 = _CoarseStencilBuffer[s00Address];
    //    uint s10 = _CoarseStencilBuffer[s10Address];
    //    uint s01 = _CoarseStencilBuffer[s01Address];
    //    uint s11 = _CoarseStencilBuffer[s11Address];*/

    //    uint s00 = _CoarseStencilBuffer[0];
    //    uint s10 = _CoarseStencilBuffer[0];
    //    uint s01 = _CoarseStencilBuffer[0];
    //    uint s11 = _CoarseStencilBuffer[0];

    //    uint HTileValue = s00 | s10 | s01 | s11;
    //    // Perform the stencil test (reject at the tile rate).
    //    //processGroup = ((HTileValue & stencilRef) != 0);
    //    processGroup = HTileValue == 0;
    //}

    //// Wait for the LDS.
    //GroupMemoryBarrierWithGroupSync();

    //if (!processGroup) { 
    //    StoreResult(pixelCoord, 0);
    //    return; }
    //
    //

    float3 centerIrradiance  = LOAD_TEXTURE2D_X(_IrradianceSource, COORD_TEXTURE2D_X(pixelCoord)).rgb;
    float  centerDepth       = 0;
    bool   passedStencilTest = TestLightingForSSS(centerIrradiance);

    // Save some bandwidth by only loading depth values for SSS pixels.
    if (passedStencilTest)
    {
        centerDepth = LOAD_TEXTURE2D_X(_CameraDepthTexture, COORD_TEXTURE2D_X(pixelCoord)).r;
    }
    
#if SSS_USE_LDS_CACHE
    uint2 cacheCoord = groupCoord + TEXTURE_CACHE_BORDER;
    // Populate the central region of the LDS cache.
    StoreSampleToCacheMemory(float4(centerIrradiance, centerDepth), cacheCoord);

    uint numBorderQuadsPerWave = TEXTURE_CACHE_SIZE_1D / 2 - 1;
    uint halfCacheWidthInQuads = TEXTURE_CACHE_SIZE_1D / 4;

    if (quadIndex < numBorderQuadsPerWave)
    {
        // Fetch another texel into the LDS.
        uint2 startQuad = halfCacheWidthInQuads * DeinterleaveQuad(waveIndex);

        uint2 quadCoord;

        // The traversal order is such that the quad's X coordinate is monotonically increasing.
        // The corner is always the near the block of the corresponding wavefront.
        // Note: the compiler can heavily optimize the code below, as the switch is scalar,
        // and there are very few unique values due to the symmetry.
        switch (waveIndex)
        {
            case 0:  // Bottom left
                quadCoord.x = max(0, (int)(quadIndex - (halfCacheWidthInQuads - 1)));
                quadCoord.y = max(0, (int)((halfCacheWidthInQuads - 1) - quadIndex));
                break;
            case 1:  // Bottom right
                quadCoord.x = min(quadIndex, halfCacheWidthInQuads - 1);
                quadCoord.y = max(0, (int)(quadIndex - (halfCacheWidthInQuads - 1)));
                break;
            case 2:  // Top left
                quadCoord.x = max(0, (int)(quadIndex - (halfCacheWidthInQuads - 1)));
                quadCoord.y = min(quadIndex, halfCacheWidthInQuads - 1);
                break;
            default: // Top right
                quadCoord.x = min(quadIndex, halfCacheWidthInQuads - 1);
                quadCoord.y = min(halfCacheWidthInQuads - 1, 2 * (halfCacheWidthInQuads - 1) - quadIndex);
                break;
        }

        uint2  cacheCoord2 = 2 * (startQuad + quadCoord) + DeinterleaveQuad(laneIndex);
        int2   pixelCoord2 = (int2)(groupOffset + cacheCoord2) - TEXTURE_CACHE_BORDER;
        float3 irradiance2 = LOAD_TEXTURE2D_X(_IrradianceSource, COORD_TEXTURE2D_X(pixelCoord2)).rgb;
        float  depth2      = 0;

        // Save some bandwidth by only loading depth values for SSS pixels.
        if (TestLightingForSSS(irradiance2))
        {
            depth2 = LOAD_TEXTURE2D_X(_CameraDepthTexture, pixelCoord2).r;
        }

        // Populate the border region of the LDS cache.
        StoreSampleToCacheMemory(float4(irradiance2, depth2), cacheCoord2);
    }

    // Wait for the LDS.
    GroupMemoryBarrierWithGroupSync();
#endif

    if (!passedStencilTest) { return; }

    PositionInputs posInput = GetPositionInput(pixelCoord, _SSScreenParams.zw);

    // The result of the stencil test allows us to statically determine the material type (SSS).
    SSSData sssData;
    DECODE_FROM_SSSBUFFER(posInput.positionSS, sssData);

    sssData.diffuseColor = centerIrradiance;

    uint   profileIndex  = sssData.diffusionProfileIndex;
    float  distScale     = sssData.subsurfaceMask ;


    float3 S             = _ShapeParams[profileIndex].rgb;
    float  d             = _ShapeParams[profileIndex].a ;
    //float  metersPerUnit = _WorldScalesAndFilterRadiiAndThicknessRemaps[profileIndex].x;
    //float  filterRadius  = _WorldScalesAndFilterRadiiAndThicknessRemaps[profileIndex].y; // In millimeters


    // Reconstruct the view-space position corresponding to the central sample.
    float2 centerPosNDC = posInput.positionNDC;
    float2 cornerPosNDC = centerPosNDC + 0.5 * _SSScreenParams.zw;
    float3 centerPosVS  = ComputeViewSpacePosition(centerPosNDC, centerDepth, UNITY_MATRIX_I_P);
    float3 cornerPosVS  = ComputeViewSpacePosition(cornerPosNDC, centerDepth, UNITY_MATRIX_I_P);

    // Rescaling the filter is equivalent to inversely scaling the world.
    //float mmPerUnit  = MILLIMETERS_PER_METER * (metersPerUnit * rcp(distScale));
    float mmPerUnit = MILLIMETERS_PER_METER * (_WorldScales[profileIndex] / distScale);
    float unitsPerMm = rcp(mmPerUnit);

    // Compute the view-space dimensions of the pixel as a quad projected onto geometry.
    // Assuming square pixels, both X and Y are have the same dimensions.
    float unitsPerPixel = 2 * abs(cornerPosVS.x - centerPosVS.x);
    float pixelsPerMm   = rcp(unitsPerPixel) * unitsPerMm;


    // Area of a disk.
    //float filterArea   = PI * Sq(filterRadius * pixelsPerMm);
    float filterArea = PI * Sq( d  * pixelsPerMm);
    uint  sampleCount  = (uint)(filterArea * rcp(SSS_PIXELS_PER_SAMPLE));
    uint  sampleBudget = (uint)_SssSampleBudget;
    sampleBudget = 21;

    //TODO
    //uint   texturingMode = GetSubsurfaceScatteringTexturingMode(profileIndex);
    uint   texturingMode = 1 ;
    float3 albedo        = ApplySubsurfaceScatteringTexturingMode(texturingMode, sssData.diffuseColor);

    if (distScale == 0 || sampleCount < 1)
    {
    #if SSS_DEBUG_LOD
        float3 green = float3(0, 1, 0);
        StoreResult(pixelCoord, green);
    #else
        StoreResult(pixelCoord, sssData.diffuseColor);
    #endif
        return;
    }

#if SSS_DEBUG_LOD
    float3 red  = float3(1, 0, 0);
    float3 blue = float3(0, 0, 1);
    StoreResult(pixelCoord, lerp(blue, red, saturate(sampleCount* rcp(sampleBudget))));
    return;
#endif

    float4x4 viewMatrix, projMatrix;
    GetLeftHandedViewSpaceMatrices(viewMatrix, projMatrix);

    // TODO: Since we have moved to forward SSS, we don't support anymore a bsdfData.normalWS.
    // Once we include normal+roughness rendering during the prepass, we will have a buffer to bind here and we will be able to reuse this part of the algorithm on demand.
#if SSS_USE_TANGENT_PLANE
    #error ThisWillNotCompile_SeeComment
    // Compute the tangent frame in view space.
    float3 normalVS = mul((float3x3)viewMatrix, bsdfData.normalWS);
    float3 tangentX = GetLocalFrame(normalVS)[0] * unitsPerMm;
    float3 tangentY = GetLocalFrame(normalVS)[1] * unitsPerMm;
#else
    float3 normalVS = float3(0, 0, 0);
    float3 tangentX = float3(0, 0, 0);
    float3 tangentY = float3(0, 0, 0);
#endif

#if SSS_DEBUG_NORMAL_VS
    // We expect the normal to be front-facing.
    float3 viewDirVS = normalize(centerPosVS);
    if (dot(normalVS, viewDirVS) >= 0)
    {
        StoreResult(pixelCoord, float3(1, 1, 1));
        return;
    }
#endif

#if SSS_RANDOM_ROTATION
    // Note that GenerateHashedRandomFloat() only uses the 23 low bits, hence the 2^24 factor.
    float phase = TWO_PI * GenerateHashedRandomFloat(uint3(pixelCoord, (uint)(centerDepth * 16777216)));
#else
    float phase = 0;
#endif

    uint n = min(sampleCount, sampleBudget);
    // Accumulate filtered irradiance and bilateral weights (for renormalization).
    float3 centerWeight    = 0; // Defer (* albedo)
    float3 totalIrradiance = 0;
    float3 totalWeight     = 0;

    for (uint i = 0; i < n; i++)
    {
        // Integrate over the image or tangent plane in the view space.
        EvaluateSample(i, n, pixelCoord, cacheOffset, profileIndex,
                       S, d, centerPosVS, mmPerUnit, pixelsPerMm,
                       phase, tangentX, tangentY, projMatrix,
                       totalIrradiance, totalWeight);
    }

    half3 spec = LOAD_TEXTURE2D_X(_SSSSpecular, COORD_TEXTURE2D_X(pixelCoord)).rgb;
    
    // Total weight is 0 for color channels without scattering.
    totalWeight = max(totalWeight, FLT_MIN);

    //StoreResult(pixelCoord, albedo);
    StoreResult(pixelCoord, albedo * (totalIrradiance / totalWeight) + spec);
    //StoreResult(pixelCoord, 1 );
    
}
