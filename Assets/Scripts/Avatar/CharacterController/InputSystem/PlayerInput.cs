//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Scripts/Avatar/CharacterController/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0e1e2564-8fea-4a7f-9172-0b9d66413748"",
            ""actions"": [
                {
                    ""name"": ""MoveDir"",
                    ""type"": ""PassThrough"",
                    ""id"": ""18aed459-b1aa-4ecd-b643-17d1dce82339"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickOnTarget"",
                    ""type"": ""Button"",
                    ""id"": ""f3f442c9-6b93-47b6-8b3a-7c098dda4195"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShortCut1"",
                    ""type"": ""Button"",
                    ""id"": ""d73b5728-bd0f-463d-be2c-df41bbc2b8d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""94b99d19-cfc3-4532-8059-42248672b46a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""27279a1a-a14d-4d4f-9e27-54aad547f1fb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c0dc9464-e07b-4ea1-8147-d28021051dfc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b711ea07-85e7-491c-81ff-cf368274858f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""14f917e0-5592-46f5-b757-d55375d6043f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9a288e27-e1f3-4020-8537-8877297aaf4c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""40c7a335-dfdd-41e0-bfba-ac45f57a0ab9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f526859-3344-40dc-aea4-b8f25d51c313"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShortCut1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6884ac4-f729-45f7-b3b1-a29a61b248e8"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MoveDir = m_Player.FindAction("MoveDir", throwIfNotFound: true);
        m_Player_ClickOnTarget = m_Player.FindAction("ClickOnTarget", throwIfNotFound: true);
        m_Player_ShortCut1 = m_Player.FindAction("ShortCut1", throwIfNotFound: true);
        m_Player_Zoom = m_Player.FindAction("Zoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_MoveDir;
    private readonly InputAction m_Player_ClickOnTarget;
    private readonly InputAction m_Player_ShortCut1;
    private readonly InputAction m_Player_Zoom;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDir => m_Wrapper.m_Player_MoveDir;
        public InputAction @ClickOnTarget => m_Wrapper.m_Player_ClickOnTarget;
        public InputAction @ShortCut1 => m_Wrapper.m_Player_ShortCut1;
        public InputAction @Zoom => m_Wrapper.m_Player_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @MoveDir.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveDir;
                @MoveDir.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveDir;
                @MoveDir.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveDir;
                @ClickOnTarget.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickOnTarget;
                @ClickOnTarget.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickOnTarget;
                @ClickOnTarget.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickOnTarget;
                @ShortCut1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShortCut1;
                @ShortCut1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShortCut1;
                @ShortCut1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShortCut1;
                @Zoom.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveDir.started += instance.OnMoveDir;
                @MoveDir.performed += instance.OnMoveDir;
                @MoveDir.canceled += instance.OnMoveDir;
                @ClickOnTarget.started += instance.OnClickOnTarget;
                @ClickOnTarget.performed += instance.OnClickOnTarget;
                @ClickOnTarget.canceled += instance.OnClickOnTarget;
                @ShortCut1.started += instance.OnShortCut1;
                @ShortCut1.performed += instance.OnShortCut1;
                @ShortCut1.canceled += instance.OnShortCut1;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMoveDir(InputAction.CallbackContext context);
        void OnClickOnTarget(InputAction.CallbackContext context);
        void OnShortCut1(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
}
